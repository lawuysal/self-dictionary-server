// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String @unique
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // One to one
  profile     Profile?
  preferences Preference?

  // One to many
  languages   Language[]
  socialPosts SocialPost[]

  // Many to many
  roles                       RolesOnUsers[]
  savedNotes                  NotesSavedOnUsers[]
  positiveActionedSocialPosts PositiveActionOnSocialPost[]
}

model Role {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?

  createdAt DateTime @default(now())

  // Many to many
  users RolesOnUsers[]
}

model RolesOnUsers {
  userId String @db.Uuid
  roleId String @db.Uuid

  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Language {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  editedAt  DateTime? @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @db.Uuid

  // One to many
  notes Note[]
}

model Note {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  translation String
  properties  String?
  intensity   Int     @default(0)
  isPublic    Boolean @default(false)

  createdAt DateTime  @default(now())
  editedAt  DateTime? @updatedAt

  language   Language @relation(fields: [languageId], references: [id])
  languageId String   @db.Uuid

  // Many to many
  savedBy NotesSavedOnUsers[]
}

model NotesSavedOnUsers {
  userId String @db.Uuid
  noteId String @db.Uuid

  savedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])

  @@id([userId, noteId])
}

model Profile {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String?
  lastName  String?
  username  String? @unique
  photoUrl  String?
  bio       String?

  updatedAt DateTime? @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique @db.Uuid
}

model Preference {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  theme    String @default("system")
  language String @default("en")

  updatedAt DateTime? @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique @db.Uuid
}

model SocialPost {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String

  createdAt DateTime @default(now())

  owner                      User                         @relation(fields: [ownerId], references: [id])
  ownerId                    String                       @db.Uuid
  PositiveActionOnSocialPost PositiveActionOnSocialPost[]
}

model PositiveActionOnSocialPost {
  postId String @db.Uuid
  userId String @db.Uuid

  positiveActionAt DateTime @default(now())

  socialPost SocialPost @relation(fields: [postId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}
